{{- if .Values.alertSignal.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.alertSignal.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.alertSignal.name }}
    component: alerts
    {{- include "market-impact.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.alertSignal.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.alertSignal.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.alertSignal.name }}
        component: alerts
        version: {{ .Values.alertSignal.image.tag | quote }}
        {{- with .Values.commonLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/api/actuator/prometheus"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      serviceAccountName: default

      containers:
        - name: {{ .Values.alertSignal.name }}
          image: {{ include "market-impact.image" (dict "registry" .Values.global.imageRegistry "repository" .Values.alertSignal.image.repository "tag" .Values.alertSignal.image.tag) }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL

          ports:
            - containerPort: {{ .Values.alertSignal.service.httpPort }}
              name: http
              protocol: TCP
            - containerPort: {{ .Values.alertSignal.service.grpcPort }}
              name: grpc
              protocol: TCP

          env:
            # ==========================================
            # SERVER CONFIGURATION
            # ==========================================
            - name: SERVER_PORT
              value: {{ .Values.alertSignal.service.httpPort | quote }}

            - name: SERVER_SERVLET_CONTEXT_PATH
              value: "/api"

            - name: GRPC_SERVER_PORT
              value: {{ .Values.alertSignal.service.grpcPort | quote }}

            - name: SPRING_APPLICATION_NAME
              value: "alert-signal-service"

            # ==========================================
            # DATABASE CONFIGURATION
            # ✅ CRITICAL FIX: Remove SPRING_DATASOURCE_URL
            # Let Spring Boot build it from individual variables
            # ==========================================
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: host

            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: port

            - name: DB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: ALERTSIGNAL_DB

            - name: DB_SCHEMA
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_SCHEMA
                  optional: true

            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: username

            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: password

            # Database Pool Configuration
            - name: DB_POOL_MIN_SIZE
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_POOL_MIN_SIZE

            - name: DB_POOL_MAX_SIZE
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_POOL_MAX_SIZE

            - name: DB_CONNECTION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_CONNECTION_TIMEOUT

            - name: DB_IDLE_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_IDLE_TIMEOUT

            # ✅ OPTIONAL: Set these for Spring Boot if needed
            - name: SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE
              value: "$(DB_POOL_MIN_SIZE)"

            - name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
              value: "$(DB_POOL_MAX_SIZE)"

            - name: SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT
              value: "$(DB_CONNECTION_TIMEOUT)"

            - name: SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT
              value: "$(DB_IDLE_TIMEOUT)"

            # JPA/Hibernate Configuration
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"

            - name: SPRING_JPA_SHOW_SQL
              value: "false"

            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.PostgreSQLDialect"

            - name: SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL
              value: "true"

            # ==========================================
            # REDIS CONFIGURATION
            # ==========================================
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secretName }}
                  key: host

            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secretName }}
                  key: port

            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secretName }}
                  key: password
                  optional: true

            - name: REDIS_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: REDIS_DATABASE_ALERT_SIGNAL

            - name: REDIS_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: REDIS_TIMEOUT

            - name: SPRING_DATA_REDIS_HOST
              value: "$(REDIS_HOST)"

            - name: SPRING_DATA_REDIS_PORT
              value: "$(REDIS_PORT)"

            - name: SPRING_DATA_REDIS_PASSWORD
              value: "$(REDIS_PASSWORD)"

            - name: SPRING_DATA_REDIS_DATABASE
              value: "$(REDIS_DATABASE)"

            - name: SPRING_DATA_REDIS_TIMEOUT
              value: "$(REDIS_TIMEOUT)ms"

            - name: SPRING_DATA_REDIS_SSL_ENABLED
              value: "true"

            # Redis Pool Configuration
            - name: REDIS_POOL_MAX_ACTIVE
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: REDIS_POOL_MAX_ACTIVE

            - name: REDIS_POOL_MAX_IDLE
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: REDIS_POOL_MAX_IDLE

            - name: REDIS_POOL_MIN_IDLE
              valueFrom:
                configMapKeyRef:
                  name: redis-config
                  key: REDIS_POOL_MIN_IDLE

            - name: SPRING_DATA_REDIS_LETTUCE_POOL_MAX_ACTIVE
              value: "$(REDIS_POOL_MAX_ACTIVE)"

            - name: SPRING_DATA_REDIS_LETTUCE_POOL_MAX_IDLE
              value: "$(REDIS_POOL_MAX_IDLE)"

            - name: SPRING_DATA_REDIS_LETTUCE_POOL_MIN_IDLE
              value: "$(REDIS_POOL_MIN_IDLE)"

            # ==========================================
            # GRPC CLIENT CONFIGURATION
            # ==========================================
            - name: GRPC_CLIENT_MARKET_IMPACT_SERVICE_ADDRESS
              value: "static://market-impact.{{ .Values.global.namespace }}.svc.cluster.local:9090"

            - name: GRPC_CLIENT_MARKET_IMPACT_SERVICE_NEGOTIATION_TYPE
              value: "PLAINTEXT"

            - name: EXTERNAL_SERVICES_MARKET_IMPACT_HOST
              value: "market-impact.{{ .Values.global.namespace }}.svc.cluster.local"

            - name: EXTERNAL_SERVICES_MARKET_IMPACT_PORT
              value: "9090"

            # ==========================================
            # ACTUATOR / MONITORING
            # ==========================================
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "health,info,prometheus,metrics"

            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"

            - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED
              value: "true"

            - name: MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
              value: "true"

            - name: MANAGEMENT_HEALTH_READINESSSTATE_ENABLED
              value: "true"

            - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
              value: "true"

            # ==========================================
            # LOGGING
            # ==========================================
            - name: LOGGING_LEVEL_ROOT
              value: "INFO"

            - name: LOGGING_LEVEL_COM_ALERTSIGNAL
              value: "DEBUG"

            - name: LOGGING_PATTERN_CONSOLE
              value: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

            # ==========================================
            # ENVIRONMENT
            # ==========================================
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.global.environment | quote }}

          resources:
            {{- toYaml .Values.alertSignal.resources | nindent 12 }}

          livenessProbe:
            httpGet:
              path: /api/actuator/health/liveness
              port: {{ .Values.alertSignal.service.httpPort }}
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5

          readinessProbe:
            httpGet:
              path: /api/actuator/health/readiness
              port: {{ .Values.alertSignal.service.httpPort }}
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3

          startupProbe:
            httpGet:
              path: /api/actuator/health/liveness
              port: {{ .Values.alertSignal.service.httpPort }}
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30

          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: logs
              mountPath: /var/log/app

      volumes:
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}

      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
{{- end }}